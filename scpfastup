#!/bin/bash

###################################################################
# Script Name : SCP Fast File Upload
# date        : 20220823
# usage       : bash scpfastup [OPTIONS] <FILENAME>
# Author      : d1ch0t0my
# Email       : d1ch0t0my@protonmail.com
# Description : Script fast upload files to the hard coded path in remote
#				machine, using the hard coded IP and credentials
###################################################################

ip=''    # <--- CHANGE THIS
user=''  # <--- CHANGE THIS
pass=''  # <--- CHANGE THIS
key=''   # <--- CHANGE THIS
lpath='' # <--- CHANGE THIS
rpath='' # <--- CHANGE THIS

usage(){
	echo -e "\n\e[1;39mUsage: \e[0;39mscpfastup [OPTIONS] <FILE_PATH>"
	echo -e "\n\e[1;39mDESCRIPTION:\e[0;39m\n"
	echo -e "    The connection information and the local and destination paths"
	echo -e "    must be encoded in the script code.\n"
	echo -e "    Optionally any or all of the parameters can be defined by the user\n    using the corresponding OPTIONS flag, but this is beyond the scope\n    of the script, the idea is to speed up uploads by hardcoding the\n    connection information in the script.\n"
	echo -e "    Paths, both local and remote, must defined as absolute paths, of\n    the type \"/home/user/Downloads\e[1;39m/\e[0;39m\", DO NOT use relative paths such\n    as \"~/Downloads/...\"."
	echo -e "\n\e[1;39mOPTIONS:\e[0;39m\n"
	echo -e "    -i:  IP of the remote machine."
	echo -e "    -u:  Specifies the username."
	echo -e "    -p:  Specifies the password."
	echo -e "    -k:  Path to the private RSA (overrides the password login option)."
	echo -e "    -l:  Defines the local path to the folder containing the filesto be\n         uploaded (define as absolute route)."
	echo -e "    -r:  Defines the remote path to the folder where the uploaded files\n         will be stored (define as absolute route)."
	echo -e "    -h:  Show this help.\n"
	exit
}

if [[ "$#" -lt 1 ]]; then usage; fi

echo -e "\n[\e[1;38;5;196m!\e[0;39m]\e[1;33mWARNING\e[0;39m: Remember to delete the hard coded information in the script at the end of its use.\n"

while getopts i:u:p:k:l:r:h opt; do
	case "${opt}" in
		i)
			if [[ ${OPTARG} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
				ip=${OPTARG}
			else
				echo -e "[\e[1;38;5;196m!\e[0;39m] ERROR: \" -i ${OPTARG}\" Is not a valid IP\n[\e[1;38;5;82m*\e[0;39m] End of Execution\n"
				usage
				exit
			fi
		 ;;
		u)
			user=${OPTARG}
		 ;;
		p)
			pass=${OPTARG}
		 ;;
		k)
			key=${OPTARG}
		 ;;
		l)
			lpath=${OPTARG}
		 ;;
		r)
			rpath=${OPTARG}
		 ;;
		h)
			usage
		 ;;
		*)
			usage; exit 1
		 ;;
	esac
done

if [[ user = '' ]] || [[ lpath = '' ]] || [[ rpath = '' ]]; then
	echo -e "[\e[1;38;5;196m!\e[0;39m] ERROR: one of the values of \"user | lpath | rpath\" has not been defined or is not recognised."
	echo -e "[\e[1;38;5;82m*\e[0;39m] End of Execution\n"
	usage
fi

if [[ $key != '' ]]; then
	echo -e "[i] COMMAND:\nscp -i $key $lpath$1 $user@$ip:$rpath$1"
	scp -i $key $lpath$1 $user@$ip:$rpath$1
elif [[ $pass != '' ]]; then
	echo -e "[i] COMMAND:\nsshpass -p $pass scp $lpath$1 $user@$ip:$rpath$1"
	sshpass -p $pass scp $lpath$1 $user@$ip:$rpath$1
else
	echo -e "[\e[1;38;5;196m!\e[0;39m] ERROR: No authentication method has been defined."
	echo -e "[\e[1;38;5;196m!\e[0;39m] Key or Pass must be defined."
	echo -e "[\e[1;38;5;82m*\e[0;39m] End of Execution\n"
	usage
fi